// ------------------------------
// edX Pattern Library Site: Utilities

// About: configuration, functions, variables, mixins, and general helpers for rendering.

// ------------------------------
// #CONFIG
// ------------------------------
$em-base: 16; // deliberately sets bourbon-based em-base (http://bourbon.io/docs/#em-base)

// grid- customizations
$pl-content-supplemental-width: rem(330); // width of supplemental content sidebar
$pl-tab-label-height:           rem(2); // height of tab labels

// grid - settings
$max-width:                     calc(100% - $pl-content-supplemental-width); // override neat's default
$grid-columns:                  8;
$column:                        rem(20);
$gutter:                        rem(20);
$visual-grid:                   true;
$visual-grid-color:             palette(primary, light);

// grid - breakpoints
$bp-small:                      new-breakpoint(320px, 2);
$bp-medium:                     new-breakpoint(800px, 4);
$bp-large:                      new-breakpoint(1000px, 8);
$bp-huge:                       new-breakpoint(1200px, 8);

// grid - baseline
$baseline:                      20;
$baseline-vertical:             $baseline;
$baseline-horizontal:           ($baseline*2);


// colors
$transparent:                   rgba(0, 0, 0, 0);

$gray:                          rgb(127, 127, 127);
$gray-cool:                     rgb(96, 125, 139);
$gray-warm:                     rgb(79, 74, 73);
$red:                           rgb(178, 6, 16);
$yellow:                        rgb(237, 189, 60);
$green:                         rgb(37, 184, 90);
$blue:                          rgb(0, 122, 186);
$pink:                          rgb(183, 37, 103);

$brand-primary:                 $blue;
$brand-secondary:               $pink;
$color-error:                   $red;
$color-warning:                 $yellow;
$color-success:                 $green;

// colors - palettes
$palettes: (
    primary: (
        base:       $brand-primary,
        mid-light:  tint($brand-primary, 15%),
        light:      tint($brand-primary, 25%),
        x-light:    tint($brand-primary, 55%),
        xx-light:   tint($brand-primary, 90%),
        mid-dark:   shade($brand-primary, 15%),
        dark:       shade($brand-primary, 25%),
        x-dark:     shade($brand-primary, 55%),
        xx-dark:    shade($brand-primary, 90%),
        mid-sat:    saturate($brand-primary, 10%),
        sat:        saturate($brand-primary, 25%),
        x-sat:      saturate($brand-primary, 40%),
        mid-trans:  transparentize($brand-primary, 0.25),
        trans:      transparentize($brand-primary, 0.50),
        x-trans:    transparentize($brand-primary, 0.75),
        xx-trans:   transparentize($brand-primary, 0.95)
    ),
    secondary: (
        base:       $brand-secondary,
        mid-light:  tint($brand-secondary, 10%),
        light:      tint($brand-secondary, 25%),
        x-light:    tint($brand-secondary, 55%),
        xx-light:   tint($brand-secondary, 75%),
        mid-dark:   shade($brand-secondary, 10%),
        dark:       shade($brand-secondary, 25%),
        x-dark:     shade($brand-secondary, 55%),
        xx-dark:    shade($brand-secondary, 90%),
        mid-sat:    saturate($brand-secondary, 10%),
        sat:        saturate($brand-secondary, 20%),
        x-sat:      saturate($brand-secondary, 30%),
        mid-trans:  transparentize($brand-secondary, 0.25),
        trans:      transparentize($brand-secondary, 0.50),
        x-trans:    transparentize($brand-secondary, 0.75),
        xx-trans:   transparentize($brand-secondary, 0.95)
    ),
    grayscale: (
        base:       $gray,
        mid-light:  tint($gray, 40%),
        light:      tint($gray, 50%),
        x-light:    tint($gray, 75%),
        xx-light:   tint($gray, 90%),
        white:      tint($gray, 97%),
        white-t:    tint($gray, 100%),
        mid-dark:   shade($gray, 40%),
        dark:       shade($gray, 50%),
        x-dark:     shade($gray, 75%),
        xx-dark:    shade($gray, 90%),
        black:      shade($gray, 90%),
        black-t:    shade($gray, 100%),
        mid-trans:  transparentize($gray, 0.25),
        trans:      transparentize($gray, 0.50),
        x-trans:    transparentize($gray, 0.75),
        xx-trans:   transparentize($gray, 0.95)
    ),
    success: (
        base:       $color-success,
        light:      tint($color-success, 25%),
        x-light:    tint($color-success, 55%),
        dark:       shade($color-success, 25%),
        x-dark:     shade($color-success, 55%),
        sat:        saturate($color-success, 20%),
        trans:      transparentize($color-success, 0.50),
        x-trans:    transparentize($color-success, 0.75),
    ),
    warning: (
        base:       $color-warning,
        light:      tint($color-warning, 25%),
        x-light:    tint($color-warning, 55%),
        dark:       shade($color-warning, 25%),
        x-dark:     shade($color-warning, 55%),
        sat:        saturate($color-warning, 20%),
        trans:      transparentize($color-warning, 0.50),
        x-trans:    transparentize($color-warning, 0.75),
    ),
    error: (
        base:       $color-error,
        light:      tint($color-error, 25%),
        x-light:    tint($color-error, 55%),
        dark:       shade($color-error, 25%),
        x-dark:     shade($color-error, 55%),
        sat:        saturate($color-error, 20%),
        trans:      transparentize($color-error, 0.50),
        x-trans:    transparentize($color-error, 0.75),
    )
);

// typography - font imports
@include font-face(
    'Open Sans',
    '../fonts/OpenSans/OpenSans-Light-webfont',
    300,
    $file-formats: woff woff2 ttf
);
@include font-face(
    'Open Sans',
    '../fonts/OpenSans/OpenSans-LightItalic-webfont',
    300,
    italic,
    $file-formats: woff woff2 ttf
);
@include font-face(
    'Open Sans',
    '../fonts/OpenSans/OpenSans-Regular-webfont',
    400,
    $file-formats: woff woff2 ttf
);
@include font-face(
    'Open Sans',
    '../fonts/OpenSans/OpenSans-Italic-webfont',
    400,
    italic,
    $file-formats: woff woff2 ttf
);
@include font-face(
    'Open Sans',
    '../fonts/OpenSans/OpenSans-Semibold-webfont',
    600,
    $file-formats: woff woff2 ttf
);
@include font-face(
    'Open Sans',
    '../fonts/OpenSans/OpenSans-SemiboldItalic-webfont',
    600,
    italic,
    $file-formats: woff woff2 ttf
);
@include font-face(
    'Open Sans',
    '../fonts/OpenSans/OpenSans-Bold-webfont',
    700,
    $file-formats: woff woff2 ttf
);
@include font-face(
    'Open Sans',
    '../fonts/OpenSans/OpenSans-BoldItalic-webfont',
    700,
    italic,
    $file-formats: woff woff2 ttf
);

// typography - font stack
$font-stack-sans-serif: 'Open Sans','Helvetica Neue', Helvetica, Arial, sans-serif;
$font-stack-monospace: 'Bitstream Vera Sans Mono', Consolas, Courier, monospace;

// typography: sizes
$font-sizes: (
    xxx-large:      38,
    xx-large:       28,
    x-large:        24,
    mid-large:      18,
    large:          21,
    base:           16,
    small:          14,
    x-small:        12,
);

// typography: line-height
$line-heights: (
    xx-large:       1.40,
    x-large:        1.40,
    large:          1.50,
    mid-large:      1.60,
    mid-small:      1.60,
    small:          1.5,
    base:           1.5,
    none:           0
);

// typography: weights
$font-weights: (
    normal:         400,
    light:          300,
    x-light:        200,
    semi-bold:      600,
    bold:           700,
    x-bold:         800
);

// typography: letter-spacing
$letter-spacing: (
    normal:         0,
    xx-tight:       -3,
    x-tight:        -2,
    tight:          -.095,
    loose:          -.075,
    x-loose:        -.025,
    xx-loose:       3
);

// z-index depth scale
$z-depths: (
    base:           0,
    mid-back:       -10,
    back:           -100,
    very-back:      -1000,
    mid-front:      10,
    front:          100,
    very-front:     1000
);

// commonvertical spacing
$spacing-vertical: (
    base:           $baseline-vertical,
    mid-small:      ($baseline-vertical*0.75),
    small:          ($baseline-vertical/2),
    x-small:        ($baseline-vertical/4),
    mid-large:      ($baseline-vertical*1.5),
    large:          ($baseline-vertical*2),
    x-large:        ($baseline-vertical*4)
);

// common horizontal spacing
$spacing-horizontal: (
    base:           $baseline-horizontal,
    mid-small:      ($baseline-horizontal*0.75),
    small:          ($baseline-horizontal/2),
    x-small:        ($baseline-horizontal/4),
    xx-small:       ($baseline-horizontal/8),
    mid-large:      ($baseline-horizontal*1.5),
    large:          ($baseline-horizontal*2),
    x-large:        ($baseline-horizontal*4)
);

// responsive breakpoints
$breakpoints: (
    small:          320px,
    medium:         800px,
    large:          1000px,
    huge:           1200px
);

// config - headings
$heading-font-family: $font-stack-sans-serif;
$heading-color: palette(grayscale, dark);

// config - copy
$copy-font-family: $font-stack-sans-serif;

// config - code
$code-font-family: $font-stack-monospace;

// ------------------------------
// #FUNCTIONS
// ------------------------------
// get colors from defined palettes map values
@function palette($palette, $tone: 'base') {
    @return map-get(map-get($palettes, $palette), $tone);
}

// get font sizes from defined map values
@function font-size($key) {
  @if map-has-key($font-sizes, $key) {
    @return rem(map-get($font-sizes, $key));
  }

  @warn "Unknown `#{$key}` in $font-sizes.";
  @return null;
}

// get line-heights from defined map values
@function line-height($key) {
  @if map-has-key($line-heights, $key) {
    @return map-get($line-heights, $key);
  }

  @warn "Unknown `#{$key}` in $line-heights.";
  @return null;
}

// get font sizes from defined map values
@function font-weight($key) {
  @if map-has-key($font-weights, $key) {
    @return map-get($font-weights, $key);
  }

  @warn "Unknown `#{$key}` in $font-weights.";
  @return null;
}

// get letter spacing from defined map values
@function letter-spacing($key) {
  @if map-has-key($letter-spacing, $key) {
    @return map-get($letter-spacing, $key);
  }

  @warn "Unknown `#{$key}` in $letter-spacing.";
  @return null;
}

// get z-indexes from defined map values
@function z-index($key) {
  @if map-has-key($z-depths, $key) {
    @return map-get($z-depths, $key);
  }

  @warn "Unknown `#{$key}` in $z-depths.";
  @return null;
}

// get vertical spacings from defined map values
@function spacing-vertical($key) {
  @if map-has-key($spacing-vertical, $key) {
    @return rem(map-get($spacing-vertical, $key));
  }

  @warn "Unknown `#{$key}` in $spacing-vertical.";
  @return null;
}

// get horizontal spacings from defined map values
@function spacing-horizontal($key) {
  @if map-has-key($spacing-horizontal, $key) {
    @return rem(map-get($spacing-horizontal, $key));
  }

  @warn "Unknown `#{$key}` in $spacing-horizontal.";
  @return null;
}

// ------------------------------
// #MIXINS
// ------------------------------
@mixin font-smoothing($value: on) {
    @if $value == on {
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }
    @else {
        -webkit-font-smoothing: subpixel-antialiased;
        -moz-osx-font-smoothing: auto;
    }
}


// ------------------------------
// #HELPERS
// ------------------------------
%state-disabled {
    pointer-events: none;
    outline: none;
    cursor: default;
}

// presentational wrapper
%wrapper {
    @include clearfix();
    width: 100%;
}

// remove spacing from first/last children
%clear-first-child {

    &:first-child {
        margin-top: 0;
        padding-top: 0;
        border-top: none;
    }
}

%clear-last-child {

    &:last-child {
        margin-bottom: 0;
        padding-bottom: 0;
        border-bottom: none;
    }
}

// accessibility
%a11y-hide {
    border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;
}

%a11y-hide-image-text {
    overflow: hidden;
    text-indent: 100%;
    white-space: nowrap;
}

// add UI cue for non-native controls
%fake-link {
  cursor: pointer;
}

// disable behavior
%state-disabled {
  pointer-events: none;
  outline: none;
  cursor: default;
}

// reset non-content minded lists
%no-list {
  list-style: none;
  text-indent: 0;
}

// make text only readable/viewable to assistive tech
%sr {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

// pl-based reset - lists
%reset-lists {
    @extend %no-list;
    margin: 0;
    padding: 0;
}

%list-unstyled {
    @extend %reset-lists;

    li,
    dt,
    dd {
        margin: 0;
        padding: 0;
    }
}

%list-inline {
    @extend %list-unstyled;

    li,
    dt,
    dd {
        display: inline-block;
    }
}

// pl-based reset - headings
%reset-headings {
    margin: 0 0 spacing-horizontal(small) 0;
    font-family: $heading-font-family;
    font-size: font-size(base);
    line-height: line-height(base);
}

// pl-based reset - copy
%reset-copy {
    font-family: $copy-font-family;
    font-size: font-size(base);
    line-height: line-height(large);
}

// pl-based reset - code
%reset-code {
    font-family: $code-font-family;
    font-size: font-size(base);
    line-height: line-height(large);
}
